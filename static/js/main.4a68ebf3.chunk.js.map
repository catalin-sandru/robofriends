{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErorBoundary.js","constants.js","containers/App.js","actions.js","reportWebVitals.js","reducers.js","index.js"],"names":["Card","name","id","email","className","src","alt","CardList","robots","cardComponent","map","user","i","SearchBox","searchChange","onChange","type","placeholder","Scroll","props","style","overflowY","border","height","children","ErrorBoundary","state","hasError","error","info","this","setState","Component","CHANGE_SEARCH_FIELD","FETCH_ROBOTS_PENDING","FETCH_ROBOTS_SUCCESS","FETCH_ROBOTS_FAILED","connect","searchField","searchRobots","fetchRobots","isPending","dispach","onSearchChange","event","text","target","value","payload","onFetchRobots","fetch","then","res","json","users","catch","err","tyoe","useEffect","filteredRobots","filter","robot","toLowerCase","includes","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","initialStateSearch","initialStateRobots","logger","createLogger","rootReducer","combineReducers","action","Object","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.4a68ebf3.chunk.js","sourcesContent":["import React from 'react';\n\nconst Card = ({name, id, email}) => {\n\treturn ( \n\t\t<div className='tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\n\t\t\t<img src={`https://robohash.org/${id}?200x200`} alt=\"robots\"/>\n\t\t\t<div>\n                <h2>{name}</h2>\n\t\t\t\t<p>{email}</p>\n\t\t\t</div>\n\t\t</div>\n\t)\n}\n\n\nexport default Card;","import React from 'react';\nimport Card from './Card';\n\nconst CardList = ({ robots }) => {\n\t// if(true) {\n\t// \tthrow new Error('Noooo');\n\t// }\n\n\tconst cardComponent = robots.map((user, i) => {\n\t\treturn <Card id={robots[i].id} name={robots[i].name} email={robots[i].email} key={robots[i].id} />\n\t})\n  return (\n\t\t<div>\n\t\t\t{cardComponent}\n\t\t</div>\n  )\n}\n\nexport default CardList;","import React from 'react';\n\nconst SearchBox = ({ searchChange }) => {\n  return (\n    <div className=\"pa2\">\n      <input \n        onChange={searchChange}\n        type=\"search\" \n        placeholder=\"search robots\"\n        className=\"pa2 ba b--green bg-lightest-blue\"\n      />\n    </div>\n  )\n}\n\nexport default SearchBox","import React from 'react';\n\nconst Scroll = (props) => {\n  return (\n    <div style={{overflowY: 'scroll', border: '5px solid black', height: '800px'}}>\n      {props.children}\n    </div>\n  )\n}\n\nexport default Scroll;","import React, { Component } from 'react';\n\nclass ErrorBoundary extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      hasError: false\n    }\n  }\n\n  componentDidCatch(error, info) {\n    this.setState({hasError: true})\n  }\n\n  render() {\n    if(this.state.hasError) {\n      return <h1>An error was encountered.</h1>\n    }\n\n    return this.props.children\n  }\n}\n\nexport default ErrorBoundary;","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\n\nexport const FETCH_ROBOTS_PENDING = 'FETCH_ROBOTS_PENDING';\nexport const FETCH_ROBOTS_SUCCESS = 'FETCH_ROBOTS_SUCCESS';\nexport const FETCH_ROBOTS_FAILED = 'FETCH_ROBOTS_FAILED';\n","import React, { useState, useEffect } from 'react';\nimport { connect } from 'react-redux';\nimport CardList from '../components/CardList';\nimport SearchBox from '../components/SearchBox';\nimport Scroll from '../components/Scroll'\nimport './App.css'\nimport ErrorBoundary from '../components/ErorBoundary';\nimport { fetchRobots, setSearchField } from '../actions';\n\n\nconst mapStateToProps = state => ({\n  searchField: state.searchRobots.searchField,\n  robots: state.fetchRobots.robots,\n  isPending: state.fetchRobots.isPending,\n  error: state.fetchRobots.error\n})\n\nconst mapDispachToProps = dispach => ({\n  onSearchChange: (event) => dispach(setSearchField(event.target.value)),\n  onFetchRobots: () => dispach(fetchRobots())\n})\n\n\nconst App = ( {searchField, onSearchChange, onFetchRobots, robots, isPending} ) => {\n\n  useEffect(() => {\n    onFetchRobots()\n    }, [])\n    \n  const filteredRobots = robots.filter(robot => {\n    return robot.name.toLowerCase().includes(searchField.toLowerCase())\n  })\n\n  return isPending ? \n    <h1>Loading...</h1> : \n    (\n    <div className=\"tc\">\n      <h1 className=\"f1\">RoboFriends</h1>\n      <SearchBox searchChange={onSearchChange}/>\n      <Scroll>\n        <ErrorBoundary>\n          <CardList robots={filteredRobots}/>\n        </ErrorBoundary>\n      </Scroll>\n    </div>\n  )\n}\n\n\n\nexport default connect(mapStateToProps, mapDispachToProps)(App);","import { CHANGE_SEARCH_FIELD, FETCH_ROBOTS_SUCCESS, FETCH_ROBOTS_PENDING, FETCH_ROBOTS_FAILED } from \"./constants\";\n\nexport const setSearchField = (text) => ({\n  type: CHANGE_SEARCH_FIELD,\n  payload: text\n})\n\nexport const fetchRobots = () => (dispach) => {\n  dispach({ type: FETCH_ROBOTS_PENDING});\n  fetch('https://jsonplaceholder.typicode.com/users')\n    .then(res => res.json())\n    .then(users => {\n      dispach({ type: FETCH_ROBOTS_SUCCESS, payload: users})\n    })\n    .catch(err => dispach({ tyoe: FETCH_ROBOTS_FAILED, payload: err}))\n}","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { CHANGE_SEARCH_FIELD, FETCH_ROBOTS_SUCCESS, FETCH_ROBOTS_PENDING, FETCH_ROBOTS_FAILED } from \"./constants\";\n\nconst initialStateSearch = {\n  searchField: ''\n}\n\nexport const searchRobots = (state=initialStateSearch, action={}) => {\n  switch(action.type) {\n    case CHANGE_SEARCH_FIELD:\n      return Object.assign({}, state, { searchField: action.payload })\n    default:\n      return state\n  }\n}\n\nconst initialStateRobots = {\n  isPending: false,\n  robots: [],\n  error: ''\n}\n\nexport const fetchRobots = (state=initialStateRobots, action={}) => {\n  switch(action.type) {\n    case FETCH_ROBOTS_PENDING:\n      return Object.assign({}, state, { isPending: true})\n    case FETCH_ROBOTS_SUCCESS:\n      return Object.assign({}, state, { robots: action.payload, isPending: false})\n    case FETCH_ROBOTS_FAILED:\n      return Object.assign({}, state, { error: action.payload, isPending: false})\n    default:\n      return state\n  }\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createLogger } from 'redux-logger';\nimport thunkMiddleware from 'redux-thunk';\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\nimport './index.css';\nimport App from './containers/App';\nimport reportWebVitals from './reportWebVitals';\nimport 'tachyons';\nimport { searchRobots, fetchRobots } from './reducers';\n\nconst logger = createLogger();\n\nconst rootReducer = combineReducers({searchRobots, fetchRobots})\n\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware, logger));\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}