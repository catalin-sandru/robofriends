{"version":3,"sources":["serviceWorker.js","components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErorBoundary.js","constants.js","containers/App.js","actions.js","reportWebVitals.js","reducers.js","index.js"],"names":["isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","Card","name","id","email","className","src","alt","CardList","robots","cardComponent","map","user","i","SearchBox","searchChange","onChange","type","placeholder","Scroll","props","style","overflowY","border","height","children","ErrorBoundary","hasError","info","this","setState","Component","CHANGE_SEARCH_FIELD","FETCH_ROBOTS_PENDING","FETCH_ROBOTS_SUCCESS","FETCH_ROBOTS_FAILED","connect","searchField","searchRobots","fetchRobots","isPending","dispach","onSearchChange","event","text","target","value","payload","onFetchRobots","fetch","res","json","users","err","tyoe","useEffect","filteredRobots","filter","robot","toLowerCase","includes","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","initialStateSearch","initialStateRobots","logger","createLogger","rootReducer","combineReducers","action","Object","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.5f3855c6.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}","import React from 'react';\n\nconst Card = ({name, id, email}) => {\n\treturn ( \n\t\t<div className='tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\n\t\t\t<img src={`https://robohash.org/${id}?200x200`} alt=\"robots\"/>\n\t\t\t<div>\n                <h2>{name}</h2>\n\t\t\t\t<p>{email}</p>\n\t\t\t</div>\n\t\t</div>\n\t)\n}\n\n\nexport default Card;","import React from 'react';\nimport Card from './Card';\n\nconst CardList = ({ robots }) => {\n\t// if(true) {\n\t// \tthrow new Error('Noooo');\n\t// }\n\n\tconst cardComponent = robots.map((user, i) => {\n\t\treturn <Card id={robots[i].id} name={robots[i].name} email={robots[i].email} key={robots[i].id} />\n\t})\n  return (\n\t\t<div>\n\t\t\t{cardComponent}\n\t\t</div>\n  )\n}\n\nexport default CardList;","import React from 'react';\n\nconst SearchBox = ({ searchChange }) => {\n  return (\n    <div className=\"pa2\">\n      <input \n        onChange={searchChange}\n        type=\"search\" \n        placeholder=\"search robots\"\n        className=\"pa2 ba b--green bg-lightest-blue\"\n      />\n    </div>\n  )\n}\n\nexport default SearchBox","import React from 'react';\n\nconst Scroll = (props) => {\n  return (\n    <div style={{overflowY: 'scroll', border: '5px solid black', height: '800px'}}>\n      {props.children}\n    </div>\n  )\n}\n\nexport default Scroll;","import React, { Component } from 'react';\n\nclass ErrorBoundary extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      hasError: false\n    }\n  }\n\n  componentDidCatch(error, info) {\n    this.setState({hasError: true})\n  }\n\n  render() {\n    if(this.state.hasError) {\n      return <h1>An error was encountered.</h1>\n    }\n\n    return this.props.children\n  }\n}\n\nexport default ErrorBoundary;","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\n\nexport const FETCH_ROBOTS_PENDING = 'FETCH_ROBOTS_PENDING';\nexport const FETCH_ROBOTS_SUCCESS = 'FETCH_ROBOTS_SUCCESS';\nexport const FETCH_ROBOTS_FAILED = 'FETCH_ROBOTS_FAILED';\n","import React, { useState, useEffect } from 'react';\nimport { connect } from 'react-redux';\nimport CardList from '../components/CardList';\nimport SearchBox from '../components/SearchBox';\nimport Scroll from '../components/Scroll'\nimport './App.css'\nimport ErrorBoundary from '../components/ErorBoundary';\nimport { fetchRobots, setSearchField } from '../actions';\n\n\nconst mapStateToProps = state => ({\n  searchField: state.searchRobots.searchField,\n  robots: state.fetchRobots.robots,\n  isPending: state.fetchRobots.isPending,\n  error: state.fetchRobots.error\n})\n\nconst mapDispachToProps = dispach => ({\n  onSearchChange: (event) => dispach(setSearchField(event.target.value)),\n  onFetchRobots: () => dispach(fetchRobots())\n})\n\n\nconst App = ( {searchField, onSearchChange, onFetchRobots, robots, isPending} ) => {\n\n  useEffect(() => {\n    onFetchRobots()\n    }, [])\n    \n  const filteredRobots = robots.filter(robot => {\n    return robot.name.toLowerCase().includes(searchField.toLowerCase())\n  })\n\n  return isPending ? \n    <h1>Loading...</h1> : \n    (\n    <div className=\"tc\">\n      <h1 className=\"f1\">RoboFriends</h1>\n      <SearchBox searchChange={onSearchChange}/>\n      <Scroll>\n        <ErrorBoundary>\n          <CardList robots={filteredRobots}/>\n        </ErrorBoundary>\n      </Scroll>\n    </div>\n  )\n}\n\n\n\nexport default connect(mapStateToProps, mapDispachToProps)(App);","import { CHANGE_SEARCH_FIELD, FETCH_ROBOTS_SUCCESS, FETCH_ROBOTS_PENDING, FETCH_ROBOTS_FAILED } from \"./constants\";\n\nexport const setSearchField = (text) => ({\n  type: CHANGE_SEARCH_FIELD,\n  payload: text\n})\n\nexport const fetchRobots = () => (dispach) => {\n  dispach({ type: FETCH_ROBOTS_PENDING});\n  fetch('https://jsonplaceholder.typicode.com/users')\n    .then(res => res.json())\n    .then(users => {\n      dispach({ type: FETCH_ROBOTS_SUCCESS, payload: users})\n    })\n    .catch(err => dispach({ tyoe: FETCH_ROBOTS_FAILED, payload: err}))\n}","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { CHANGE_SEARCH_FIELD, FETCH_ROBOTS_SUCCESS, FETCH_ROBOTS_PENDING, FETCH_ROBOTS_FAILED } from \"./constants\";\n\nconst initialStateSearch = {\n  searchField: ''\n}\n\nexport const searchRobots = (state=initialStateSearch, action={}) => {\n  switch(action.type) {\n    case CHANGE_SEARCH_FIELD:\n      return Object.assign({}, state, { searchField: action.payload })\n    default:\n      return state\n  }\n}\n\nconst initialStateRobots = {\n  isPending: false,\n  robots: [],\n  error: ''\n}\n\nexport const fetchRobots = (state=initialStateRobots, action={}) => {\n  switch(action.type) {\n    case FETCH_ROBOTS_PENDING:\n      return Object.assign({}, state, { isPending: true})\n    case FETCH_ROBOTS_SUCCESS:\n      return Object.assign({}, state, { robots: action.payload, isPending: false})\n    case FETCH_ROBOTS_FAILED:\n      return Object.assign({}, state, { error: action.payload, isPending: false})\n    default:\n      return state\n  }\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from 'react-redux';\nimport { createLogger } from 'redux-logger';\nimport thunkMiddleware from 'redux-thunk';\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\nimport './index.css';\nimport App from './containers/App';\nimport reportWebVitals from './reportWebVitals';\nimport 'tachyons';\nimport { searchRobots, fetchRobots } from './reducers';\n\nconst logger = createLogger();\n\nconst rootReducer = combineReducers({searchRobots, fetchRobots})\n\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware, logger));\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\nserviceWorker.register();"],"sourceRoot":""}